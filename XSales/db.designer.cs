#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XSales
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="xpremaSales")]
	public partial class dbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertItemCategory(ItemCategory instance);
    partial void UpdateItemCategory(ItemCategory instance);
    partial void DeleteItemCategory(ItemCategory instance);
    partial void InsertStore(Store instance);
    partial void UpdateStore(Store instance);
    partial void DeleteStore(Store instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertStoreHistory(StoreHistory instance);
    partial void UpdateStoreHistory(StoreHistory instance);
    partial void DeleteStoreHistory(StoreHistory instance);
    partial void InsertExpenssesDetail(ExpenssesDetail instance);
    partial void UpdateExpenssesDetail(ExpenssesDetail instance);
    partial void DeleteExpenssesDetail(ExpenssesDetail instance);
    partial void InsertExpenss(Expenss instance);
    partial void UpdateExpenss(Expenss instance);
    partial void DeleteExpenss(Expenss instance);
    partial void InsertPurshesBill(PurshesBill instance);
    partial void UpdatePurshesBill(PurshesBill instance);
    partial void DeletePurshesBill(PurshesBill instance);
    partial void InsertPourshesDetail(PourshesDetail instance);
    partial void UpdatePourshesDetail(PourshesDetail instance);
    partial void DeletePourshesDetail(PourshesDetail instance);
    partial void InsertBillDetail(BillDetail instance);
    partial void UpdateBillDetail(BillDetail instance);
    partial void DeleteBillDetail(BillDetail instance);
    partial void InsertBill(Bill instance);
    partial void UpdateBill(Bill instance);
    partial void DeleteBill(Bill instance);
    partial void InsertCustomerQ_Detail(CustomerQ_Detail instance);
    partial void UpdateCustomerQ_Detail(CustomerQ_Detail instance);
    partial void DeleteCustomerQ_Detail(CustomerQ_Detail instance);
    partial void InsertCustomer(Customer instance);
    partial void UpdateCustomer(Customer instance);
    partial void DeleteCustomer(Customer instance);
    partial void InsertCustomerQotaion(CustomerQotaion instance);
    partial void UpdateCustomerQotaion(CustomerQotaion instance);
    partial void DeleteCustomerQotaion(CustomerQotaion instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public dbDataContext() : 
				base(global::XSales.Properties.Settings.Default.xpremaSalesConnectionString1, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ItemCategory> ItemCategories
		{
			get
			{
				return this.GetTable<ItemCategory>();
			}
		}
		
		public System.Data.Linq.Table<Store> Stores
		{
			get
			{
				return this.GetTable<Store>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<StoreHistory> StoreHistories
		{
			get
			{
				return this.GetTable<StoreHistory>();
			}
		}
		
		public System.Data.Linq.Table<ExpenssesDetail> ExpenssesDetails
		{
			get
			{
				return this.GetTable<ExpenssesDetail>();
			}
		}
		
		public System.Data.Linq.Table<Expenss> Expensses
		{
			get
			{
				return this.GetTable<Expenss>();
			}
		}
		
		public System.Data.Linq.Table<PurshesBill> PurshesBills
		{
			get
			{
				return this.GetTable<PurshesBill>();
			}
		}
		
		public System.Data.Linq.Table<PourshesDetail> PourshesDetails
		{
			get
			{
				return this.GetTable<PourshesDetail>();
			}
		}
		
		public System.Data.Linq.Table<BillDetail> BillDetails
		{
			get
			{
				return this.GetTable<BillDetail>();
			}
		}
		
		public System.Data.Linq.Table<Bill> Bills
		{
			get
			{
				return this.GetTable<Bill>();
			}
		}
		
		public System.Data.Linq.Table<CustomerQ_Detail> CustomerQ_Details
		{
			get
			{
				return this.GetTable<CustomerQ_Detail>();
			}
		}
		
		public System.Data.Linq.Table<Customer> Customers
		{
			get
			{
				return this.GetTable<Customer>();
			}
		}
		
		public System.Data.Linq.Table<CustomerQotaion> CustomerQotaions
		{
			get
			{
				return this.GetTable<CustomerQotaion>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemCategory")]
	public partial class ItemCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CtegoryName;
		
		private string _Description;
		
		private EntitySet<Item> _Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCtegoryNameChanging(string value);
    partial void OnCtegoryNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public ItemCategory()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CtegoryName", DbType="NVarChar(50)")]
		public string CtegoryName
		{
			get
			{
				return this._CtegoryName;
			}
			set
			{
				if ((this._CtegoryName != value))
				{
					this.OnCtegoryNameChanging(value);
					this.SendPropertyChanging();
					this._CtegoryName = value;
					this.SendPropertyChanged("CtegoryName");
					this.OnCtegoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategory_Item", Storage="_Items", ThisKey="ID", OtherKey="CategoryID")]
		public EntitySet<Item> Items
		{
			get
			{
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategory = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.ItemCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Store")]
	public partial class Store : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ItemID;
		
		private System.Nullable<int> _Qty;
		
		private System.Nullable<System.DateTime> _DateOfImport;
		
		private System.Nullable<System.DateTime> _ExpiredDate;
		
		private string _ItemBarCode;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnDateOfImportChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfImportChanged();
    partial void OnExpiredDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpiredDateChanged();
    partial void OnItemBarCodeChanging(string value);
    partial void OnItemBarCodeChanged();
    #endregion
		
		public Store()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfImport", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfImport
		{
			get
			{
				return this._DateOfImport;
			}
			set
			{
				if ((this._DateOfImport != value))
				{
					this.OnDateOfImportChanging(value);
					this.SendPropertyChanging();
					this._DateOfImport = value;
					this.SendPropertyChanged("DateOfImport");
					this.OnDateOfImportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpiredDate
		{
			get
			{
				return this._ExpiredDate;
			}
			set
			{
				if ((this._ExpiredDate != value))
				{
					this.OnExpiredDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiredDate = value;
					this.SendPropertyChanged("ExpiredDate");
					this.OnExpiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemBarCode", DbType="NVarChar(500)")]
		public string ItemBarCode
		{
			get
			{
				return this._ItemBarCode;
			}
			set
			{
				if ((this._ItemBarCode != value))
				{
					this.OnItemBarCodeChanging(value);
					this.SendPropertyChanging();
					this._ItemBarCode = value;
					this.SendPropertyChanged("ItemBarCode");
					this.OnItemBarCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Store", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Stores.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Stores.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _CategoryID;
		
		private string _ItemModel;
		
		private string _ItemName;
		
		private string _ItemDescription;
		
		private string _ItemPrice;
		
		private EntitySet<Store> _Stores;
		
		private EntitySet<StoreHistory> _StoreHistories;
		
		private EntitySet<BillDetail> _BillDetails;
		
		private EntityRef<ItemCategory> _ItemCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCategoryIDChanging(System.Nullable<int> value);
    partial void OnCategoryIDChanged();
    partial void OnItemModelChanging(string value);
    partial void OnItemModelChanged();
    partial void OnItemNameChanging(string value);
    partial void OnItemNameChanged();
    partial void OnItemDescriptionChanging(string value);
    partial void OnItemDescriptionChanged();
    partial void OnItemPriceChanging(string value);
    partial void OnItemPriceChanged();
    #endregion
		
		public Item()
		{
			this._Stores = new EntitySet<Store>(new Action<Store>(this.attach_Stores), new Action<Store>(this.detach_Stores));
			this._StoreHistories = new EntitySet<StoreHistory>(new Action<StoreHistory>(this.attach_StoreHistories), new Action<StoreHistory>(this.detach_StoreHistories));
			this._BillDetails = new EntitySet<BillDetail>(new Action<BillDetail>(this.attach_BillDetails), new Action<BillDetail>(this.detach_BillDetails));
			this._ItemCategory = default(EntityRef<ItemCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int")]
		public System.Nullable<int> CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._ItemCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemModel", DbType="NVarChar(50)")]
		public string ItemModel
		{
			get
			{
				return this._ItemModel;
			}
			set
			{
				if ((this._ItemModel != value))
				{
					this.OnItemModelChanging(value);
					this.SendPropertyChanging();
					this._ItemModel = value;
					this.SendPropertyChanged("ItemModel");
					this.OnItemModelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemName", DbType="NVarChar(50)")]
		public string ItemName
		{
			get
			{
				return this._ItemName;
			}
			set
			{
				if ((this._ItemName != value))
				{
					this.OnItemNameChanging(value);
					this.SendPropertyChanging();
					this._ItemName = value;
					this.SendPropertyChanged("ItemName");
					this.OnItemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemDescription", DbType="NVarChar(50)")]
		public string ItemDescription
		{
			get
			{
				return this._ItemDescription;
			}
			set
			{
				if ((this._ItemDescription != value))
				{
					this.OnItemDescriptionChanging(value);
					this.SendPropertyChanging();
					this._ItemDescription = value;
					this.SendPropertyChanged("ItemDescription");
					this.OnItemDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemPrice", DbType="NVarChar(50)")]
		public string ItemPrice
		{
			get
			{
				return this._ItemPrice;
			}
			set
			{
				if ((this._ItemPrice != value))
				{
					this.OnItemPriceChanging(value);
					this.SendPropertyChanging();
					this._ItemPrice = value;
					this.SendPropertyChanged("ItemPrice");
					this.OnItemPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Store", Storage="_Stores", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<Store> Stores
		{
			get
			{
				return this._Stores;
			}
			set
			{
				this._Stores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_StoreHistory", Storage="_StoreHistories", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<StoreHistory> StoreHistories
		{
			get
			{
				return this._StoreHistories;
			}
			set
			{
				this._StoreHistories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_BillDetail", Storage="_BillDetails", ThisKey="ID", OtherKey="ItemID")]
		public EntitySet<BillDetail> BillDetails
		{
			get
			{
				return this._BillDetails;
			}
			set
			{
				this._BillDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ItemCategory_Item", Storage="_ItemCategory", ThisKey="CategoryID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public ItemCategory ItemCategory
		{
			get
			{
				return this._ItemCategory.Entity;
			}
			set
			{
				ItemCategory previousValue = this._ItemCategory.Entity;
				if (((previousValue != value) 
							|| (this._ItemCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemCategory.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._ItemCategory.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._CategoryID = value.ID;
					}
					else
					{
						this._CategoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ItemCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Stores(Store entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_StoreHistories(StoreHistory entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_StoreHistories(StoreHistory entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_BillDetails(BillDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_BillDetails(BillDetail entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StoreHistory")]
	public partial class StoreHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ItemID;
		
		private System.Nullable<int> _Qty;
		
		private System.Nullable<System.DateTime> _DateOfProcess;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnDateOfProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfProcessChanged();
    #endregion
		
		public StoreHistory()
		{
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfProcess", DbType="Date")]
		public System.Nullable<System.DateTime> DateOfProcess
		{
			get
			{
				return this._DateOfProcess;
			}
			set
			{
				if ((this._DateOfProcess != value))
				{
					this.OnDateOfProcessChanging(value);
					this.SendPropertyChanging();
					this._DateOfProcess = value;
					this.SendPropertyChanged("DateOfProcess");
					this.OnDateOfProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_StoreHistory", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.StoreHistories.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.StoreHistories.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpenssesDetails")]
	public partial class ExpenssesDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ExpenssesID;
		
		private System.Nullable<double> _Amount;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _DateOf;
		
		private EntityRef<Expenss> _Expenss;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExpenssesIDChanging(System.Nullable<int> value);
    partial void OnExpenssesIDChanged();
    partial void OnAmountChanging(System.Nullable<double> value);
    partial void OnAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateOfChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfChanged();
    #endregion
		
		public ExpenssesDetail()
		{
			this._Expenss = default(EntityRef<Expenss>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenssesID", DbType="Int")]
		public System.Nullable<int> ExpenssesID
		{
			get
			{
				return this._ExpenssesID;
			}
			set
			{
				if ((this._ExpenssesID != value))
				{
					if (this._Expenss.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnExpenssesIDChanging(value);
					this.SendPropertyChanging();
					this._ExpenssesID = value;
					this.SendPropertyChanged("ExpenssesID");
					this.OnExpenssesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float")]
		public System.Nullable<double> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(1000)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOf", DbType="Date")]
		public System.Nullable<System.DateTime> DateOf
		{
			get
			{
				return this._DateOf;
			}
			set
			{
				if ((this._DateOf != value))
				{
					this.OnDateOfChanging(value);
					this.SendPropertyChanging();
					this._DateOf = value;
					this.SendPropertyChanged("DateOf");
					this.OnDateOfChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ExpenssesDetail", Storage="_Expenss", ThisKey="ExpenssesID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Expenss Expenss
		{
			get
			{
				return this._Expenss.Entity;
			}
			set
			{
				Expenss previousValue = this._Expenss.Entity;
				if (((previousValue != value) 
							|| (this._Expenss.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Expenss.Entity = null;
						previousValue.ExpenssesDetails.Remove(this);
					}
					this._Expenss.Entity = value;
					if ((value != null))
					{
						value.ExpenssesDetails.Add(this);
						this._ExpenssesID = value.ID;
					}
					else
					{
						this._ExpenssesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Expenss");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Expensses")]
	public partial class Expenss : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _ExpensessName;
		
		private string _Description;
		
		private EntitySet<ExpenssesDetail> _ExpenssesDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnExpensessNameChanging(string value);
    partial void OnExpensessNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Expenss()
		{
			this._ExpenssesDetails = new EntitySet<ExpenssesDetail>(new Action<ExpenssesDetail>(this.attach_ExpenssesDetails), new Action<ExpenssesDetail>(this.detach_ExpenssesDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpensessName", DbType="NVarChar(50)")]
		public string ExpensessName
		{
			get
			{
				return this._ExpensessName;
			}
			set
			{
				if ((this._ExpensessName != value))
				{
					this.OnExpensessNameChanging(value);
					this.SendPropertyChanging();
					this._ExpensessName = value;
					this.SendPropertyChanged("ExpensessName");
					this.OnExpensessNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(50)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Expenss_ExpenssesDetail", Storage="_ExpenssesDetails", ThisKey="ID", OtherKey="ExpenssesID")]
		public EntitySet<ExpenssesDetail> ExpenssesDetails
		{
			get
			{
				return this._ExpenssesDetails;
			}
			set
			{
				this._ExpenssesDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExpenssesDetails(ExpenssesDetail entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = this;
		}
		
		private void detach_ExpenssesDetails(ExpenssesDetail entity)
		{
			this.SendPropertyChanging();
			entity.Expenss = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PurshesBills")]
	public partial class PurshesBill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _PursesID;
		
		private System.Nullable<System.DateTime> _DatefProcess;
		
		private string _SuppilerName;
		
		private string _Descriptin;
		
		private EntitySet<PourshesDetail> _PourshesDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPursesIDChanging(string value);
    partial void OnPursesIDChanged();
    partial void OnDatefProcessChanging(System.Nullable<System.DateTime> value);
    partial void OnDatefProcessChanged();
    partial void OnSuppilerNameChanging(string value);
    partial void OnSuppilerNameChanged();
    partial void OnDescriptinChanging(string value);
    partial void OnDescriptinChanged();
    #endregion
		
		public PurshesBill()
		{
			this._PourshesDetails = new EntitySet<PourshesDetail>(new Action<PourshesDetail>(this.attach_PourshesDetails), new Action<PourshesDetail>(this.detach_PourshesDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PursesID", DbType="NVarChar(50)")]
		public string PursesID
		{
			get
			{
				return this._PursesID;
			}
			set
			{
				if ((this._PursesID != value))
				{
					this.OnPursesIDChanging(value);
					this.SendPropertyChanging();
					this._PursesID = value;
					this.SendPropertyChanged("PursesID");
					this.OnPursesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatefProcess", DbType="Date")]
		public System.Nullable<System.DateTime> DatefProcess
		{
			get
			{
				return this._DatefProcess;
			}
			set
			{
				if ((this._DatefProcess != value))
				{
					this.OnDatefProcessChanging(value);
					this.SendPropertyChanging();
					this._DatefProcess = value;
					this.SendPropertyChanged("DatefProcess");
					this.OnDatefProcessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuppilerName", DbType="NVarChar(500)")]
		public string SuppilerName
		{
			get
			{
				return this._SuppilerName;
			}
			set
			{
				if ((this._SuppilerName != value))
				{
					this.OnSuppilerNameChanging(value);
					this.SendPropertyChanging();
					this._SuppilerName = value;
					this.SendPropertyChanged("SuppilerName");
					this.OnSuppilerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Descriptin", DbType="NVarChar(4000)")]
		public string Descriptin
		{
			get
			{
				return this._Descriptin;
			}
			set
			{
				if ((this._Descriptin != value))
				{
					this.OnDescriptinChanging(value);
					this.SendPropertyChanging();
					this._Descriptin = value;
					this.SendPropertyChanged("Descriptin");
					this.OnDescriptinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurshesBill_PourshesDetail", Storage="_PourshesDetails", ThisKey="ID", OtherKey="PourshesID")]
		public EntitySet<PourshesDetail> PourshesDetails
		{
			get
			{
				return this._PourshesDetails;
			}
			set
			{
				this._PourshesDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PourshesDetails(PourshesDetail entity)
		{
			this.SendPropertyChanging();
			entity.PurshesBill = this;
		}
		
		private void detach_PourshesDetails(PourshesDetail entity)
		{
			this.SendPropertyChanging();
			entity.PurshesBill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PourshesDetails")]
	public partial class PourshesDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _PourshesID;
		
		private System.Nullable<int> _ItemID;
		
		private System.Nullable<int> _Qty;
		
		private string _Description;
		
		private EntityRef<PurshesBill> _PurshesBill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPourshesIDChanging(System.Nullable<int> value);
    partial void OnPourshesIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PourshesDetail()
		{
			this._PurshesBill = default(EntityRef<PurshesBill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PourshesID", DbType="Int")]
		public System.Nullable<int> PourshesID
		{
			get
			{
				return this._PourshesID;
			}
			set
			{
				if ((this._PourshesID != value))
				{
					if (this._PurshesBill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPourshesIDChanging(value);
					this.SendPropertyChanging();
					this._PourshesID = value;
					this.SendPropertyChanged("PourshesID");
					this.OnPourshesIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PurshesBill_PourshesDetail", Storage="_PurshesBill", ThisKey="PourshesID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public PurshesBill PurshesBill
		{
			get
			{
				return this._PurshesBill.Entity;
			}
			set
			{
				PurshesBill previousValue = this._PurshesBill.Entity;
				if (((previousValue != value) 
							|| (this._PurshesBill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PurshesBill.Entity = null;
						previousValue.PourshesDetails.Remove(this);
					}
					this._PurshesBill.Entity = value;
					if ((value != null))
					{
						value.PourshesDetails.Add(this);
						this._PourshesID = value.ID;
					}
					else
					{
						this._PourshesID = default(Nullable<int>);
					}
					this.SendPropertyChanged("PurshesBill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BillDetails")]
	public partial class BillDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _BillID;
		
		private System.Nullable<int> _ItemID;
		
		private System.Nullable<int> _Qty;
		
		private string _Status;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Bill> _Bill;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnBillIDChanging(System.Nullable<int> value);
    partial void OnBillIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnQtyChanging(System.Nullable<int> value);
    partial void OnQtyChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public BillDetail()
		{
			this._Item = default(EntityRef<Item>);
			this._Bill = default(EntityRef<Bill>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillID", DbType="Int")]
		public System.Nullable<int> BillID
		{
			get
			{
				return this._BillID;
			}
			set
			{
				if ((this._BillID != value))
				{
					if (this._Bill.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBillIDChanging(value);
					this.SendPropertyChanging();
					this._BillID = value;
					this.SendPropertyChanged("BillID");
					this.OnBillIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="Int")]
		public System.Nullable<int> Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NChar(10)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_BillDetail", Storage="_Item", ThisKey="ItemID", OtherKey="ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.BillDetails.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.BillDetails.Add(this);
						this._ItemID = value.ID;
					}
					else
					{
						this._ItemID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillDetail", Storage="_Bill", ThisKey="BillID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Bill Bill
		{
			get
			{
				return this._Bill.Entity;
			}
			set
			{
				Bill previousValue = this._Bill.Entity;
				if (((previousValue != value) 
							|| (this._Bill.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bill.Entity = null;
						previousValue.BillDetails.Remove(this);
					}
					this._Bill.Entity = value;
					if ((value != null))
					{
						value.BillDetails.Add(this);
						this._BillID = value.ID;
					}
					else
					{
						this._BillID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Bill");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bill")]
	public partial class Bill : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _BillDate;
		
		private System.Nullable<double> _BillAmunt;
		
		private System.Nullable<int> _UserID;
		
		private EntitySet<BillDetail> _BillDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnBillDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBillDateChanged();
    partial void OnBillAmuntChanging(System.Nullable<double> value);
    partial void OnBillAmuntChanged();
    partial void OnUserIDChanging(System.Nullable<int> value);
    partial void OnUserIDChanged();
    #endregion
		
		public Bill()
		{
			this._BillDetails = new EntitySet<BillDetail>(new Action<BillDetail>(this.attach_BillDetails), new Action<BillDetail>(this.detach_BillDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillDate", DbType="Date")]
		public System.Nullable<System.DateTime> BillDate
		{
			get
			{
				return this._BillDate;
			}
			set
			{
				if ((this._BillDate != value))
				{
					this.OnBillDateChanging(value);
					this.SendPropertyChanging();
					this._BillDate = value;
					this.SendPropertyChanged("BillDate");
					this.OnBillDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillAmunt", DbType="Float")]
		public System.Nullable<double> BillAmunt
		{
			get
			{
				return this._BillAmunt;
			}
			set
			{
				if ((this._BillAmunt != value))
				{
					this.OnBillAmuntChanging(value);
					this.SendPropertyChanging();
					this._BillAmunt = value;
					this.SendPropertyChanged("BillAmunt");
					this.OnBillAmuntChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bill_BillDetail", Storage="_BillDetails", ThisKey="ID", OtherKey="BillID")]
		public EntitySet<BillDetail> BillDetails
		{
			get
			{
				return this._BillDetails;
			}
			set
			{
				this._BillDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BillDetails(BillDetail entity)
		{
			this.SendPropertyChanging();
			entity.Bill = this;
		}
		
		private void detach_BillDetails(BillDetail entity)
		{
			this.SendPropertyChanging();
			entity.Bill = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerQ_Details")]
	public partial class CustomerQ_Detail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _QID;
		
		private System.Nullable<int> _ItemID;
		
		private string _Description;
		
		private string _Qty;
		
		private EntityRef<CustomerQotaion> _CustomerQotaion;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQIDChanging(System.Nullable<int> value);
    partial void OnQIDChanged();
    partial void OnItemIDChanging(System.Nullable<int> value);
    partial void OnItemIDChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQtyChanging(string value);
    partial void OnQtyChanged();
    #endregion
		
		public CustomerQ_Detail()
		{
			this._CustomerQotaion = default(EntityRef<CustomerQotaion>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QID", DbType="Int")]
		public System.Nullable<int> QID
		{
			get
			{
				return this._QID;
			}
			set
			{
				if ((this._QID != value))
				{
					if (this._CustomerQotaion.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQIDChanging(value);
					this.SendPropertyChanging();
					this._QID = value;
					this.SendPropertyChanged("QID");
					this.OnQIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemID", DbType="Int")]
		public System.Nullable<int> ItemID
		{
			get
			{
				return this._ItemID;
			}
			set
			{
				if ((this._ItemID != value))
				{
					this.OnItemIDChanging(value);
					this.SendPropertyChanging();
					this._ItemID = value;
					this.SendPropertyChanged("ItemID");
					this.OnItemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Qty", DbType="NVarChar(50)")]
		public string Qty
		{
			get
			{
				return this._Qty;
			}
			set
			{
				if ((this._Qty != value))
				{
					this.OnQtyChanging(value);
					this.SendPropertyChanging();
					this._Qty = value;
					this.SendPropertyChanged("Qty");
					this.OnQtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerQotaion_CustomerQ_Detail", Storage="_CustomerQotaion", ThisKey="QID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public CustomerQotaion CustomerQotaion
		{
			get
			{
				return this._CustomerQotaion.Entity;
			}
			set
			{
				CustomerQotaion previousValue = this._CustomerQotaion.Entity;
				if (((previousValue != value) 
							|| (this._CustomerQotaion.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerQotaion.Entity = null;
						previousValue.CustomerQ_Details.Remove(this);
					}
					this._CustomerQotaion.Entity = value;
					if ((value != null))
					{
						value.CustomerQ_Details.Add(this);
						this._QID = value.ID;
					}
					else
					{
						this._QID = default(Nullable<int>);
					}
					this.SendPropertyChanged("CustomerQotaion");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Customers")]
	public partial class Customer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _CustomerName;
		
		private string _CustomerPhone;
		
		private string _Email;
		
		private EntitySet<CustomerQotaion> _CustomerQotaions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomerPhoneChanging(string value);
    partial void OnCustomerPhoneChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public Customer()
		{
			this._CustomerQotaions = new EntitySet<CustomerQotaion>(new Action<CustomerQotaion>(this.attach_CustomerQotaions), new Action<CustomerQotaion>(this.detach_CustomerQotaions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="NVarChar(50)")]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPhone", DbType="NVarChar(50)")]
		public string CustomerPhone
		{
			get
			{
				return this._CustomerPhone;
			}
			set
			{
				if ((this._CustomerPhone != value))
				{
					this.OnCustomerPhoneChanging(value);
					this.SendPropertyChanging();
					this._CustomerPhone = value;
					this.SendPropertyChanged("CustomerPhone");
					this.OnCustomerPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerQotaion", Storage="_CustomerQotaions", ThisKey="ID", OtherKey="CustomerID")]
		public EntitySet<CustomerQotaion> CustomerQotaions
		{
			get
			{
				return this._CustomerQotaions;
			}
			set
			{
				this._CustomerQotaions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerQotaions(CustomerQotaion entity)
		{
			this.SendPropertyChanging();
			entity.Customer = this;
		}
		
		private void detach_CustomerQotaions(CustomerQotaion entity)
		{
			this.SendPropertyChanging();
			entity.Customer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerQotaion")]
	public partial class CustomerQotaion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<System.DateTime> _QDate;
		
		private System.Nullable<double> _QAmount;
		
		private string _Description;
		
		private System.Nullable<int> _CustomerID;
		
		private EntitySet<CustomerQ_Detail> _CustomerQ_Details;
		
		private EntityRef<Customer> _Customer;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnQDateChanging(System.Nullable<System.DateTime> value);
    partial void OnQDateChanged();
    partial void OnQAmountChanging(System.Nullable<double> value);
    partial void OnQAmountChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCustomerIDChanging(System.Nullable<int> value);
    partial void OnCustomerIDChanged();
    #endregion
		
		public CustomerQotaion()
		{
			this._CustomerQ_Details = new EntitySet<CustomerQ_Detail>(new Action<CustomerQ_Detail>(this.attach_CustomerQ_Details), new Action<CustomerQ_Detail>(this.detach_CustomerQ_Details));
			this._Customer = default(EntityRef<Customer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QDate", DbType="Date")]
		public System.Nullable<System.DateTime> QDate
		{
			get
			{
				return this._QDate;
			}
			set
			{
				if ((this._QDate != value))
				{
					this.OnQDateChanging(value);
					this.SendPropertyChanging();
					this._QDate = value;
					this.SendPropertyChanged("QDate");
					this.OnQDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QAmount", DbType="Float")]
		public System.Nullable<double> QAmount
		{
			get
			{
				return this._QAmount;
			}
			set
			{
				if ((this._QAmount != value))
				{
					this.OnQAmountChanging(value);
					this.SendPropertyChanging();
					this._QAmount = value;
					this.SendPropertyChanged("QAmount");
					this.OnQAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int")]
		public System.Nullable<int> CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (this._Customer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerQotaion_CustomerQ_Detail", Storage="_CustomerQ_Details", ThisKey="ID", OtherKey="QID")]
		public EntitySet<CustomerQ_Detail> CustomerQ_Details
		{
			get
			{
				return this._CustomerQ_Details;
			}
			set
			{
				this._CustomerQ_Details.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Customer_CustomerQotaion", Storage="_Customer", ThisKey="CustomerID", OtherKey="ID", IsForeignKey=true)]
		public Customer Customer
		{
			get
			{
				return this._Customer.Entity;
			}
			set
			{
				Customer previousValue = this._Customer.Entity;
				if (((previousValue != value) 
							|| (this._Customer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Customer.Entity = null;
						previousValue.CustomerQotaions.Remove(this);
					}
					this._Customer.Entity = value;
					if ((value != null))
					{
						value.CustomerQotaions.Add(this);
						this._CustomerID = value.ID;
					}
					else
					{
						this._CustomerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Customer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerQ_Details(CustomerQ_Detail entity)
		{
			this.SendPropertyChanging();
			entity.CustomerQotaion = this;
		}
		
		private void detach_CustomerQ_Details(CustomerQ_Detail entity)
		{
			this.SendPropertyChanging();
			entity.CustomerQotaion = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FullName;
		
		private string _UserName;
		
		private string _pwd;
		
		private System.Nullable<bool> _IsCategory;
		
		private System.Nullable<bool> _IsItem;
		
		private System.Nullable<bool> _IsStore;
		
		private System.Nullable<bool> _Ispurchase;
		
		private System.Nullable<bool> _IsSales;
		
		private System.Nullable<bool> _IsExpensses;
		
		private System.Nullable<bool> _IsGoods;
		
		private System.Nullable<bool> _IsSalesBetween2Date;
		
		private System.Nullable<bool> _IsReportExpensses;
		
		private System.Nullable<bool> _IsBalanceSheet;
		
		private System.Nullable<bool> _IsUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnpwdChanging(string value);
    partial void OnpwdChanged();
    partial void OnIsCategoryChanging(System.Nullable<bool> value);
    partial void OnIsCategoryChanged();
    partial void OnIsItemChanging(System.Nullable<bool> value);
    partial void OnIsItemChanged();
    partial void OnIsStoreChanging(System.Nullable<bool> value);
    partial void OnIsStoreChanged();
    partial void OnIspurchaseChanging(System.Nullable<bool> value);
    partial void OnIspurchaseChanged();
    partial void OnIsSalesChanging(System.Nullable<bool> value);
    partial void OnIsSalesChanged();
    partial void OnIsExpenssesChanging(System.Nullable<bool> value);
    partial void OnIsExpenssesChanged();
    partial void OnIsGoodsChanging(System.Nullable<bool> value);
    partial void OnIsGoodsChanged();
    partial void OnIsSalesBetween2DateChanging(System.Nullable<bool> value);
    partial void OnIsSalesBetween2DateChanged();
    partial void OnIsReportExpenssesChanging(System.Nullable<bool> value);
    partial void OnIsReportExpenssesChanged();
    partial void OnIsBalanceSheetChanging(System.Nullable<bool> value);
    partial void OnIsBalanceSheetChanged();
    partial void OnIsUserChanging(System.Nullable<bool> value);
    partial void OnIsUserChanged();
    #endregion
		
		public User()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(50)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pwd", DbType="NVarChar(50)")]
		public string pwd
		{
			get
			{
				return this._pwd;
			}
			set
			{
				if ((this._pwd != value))
				{
					this.OnpwdChanging(value);
					this.SendPropertyChanging();
					this._pwd = value;
					this.SendPropertyChanged("pwd");
					this.OnpwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCategory", DbType="Bit")]
		public System.Nullable<bool> IsCategory
		{
			get
			{
				return this._IsCategory;
			}
			set
			{
				if ((this._IsCategory != value))
				{
					this.OnIsCategoryChanging(value);
					this.SendPropertyChanging();
					this._IsCategory = value;
					this.SendPropertyChanged("IsCategory");
					this.OnIsCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsItem", DbType="Bit")]
		public System.Nullable<bool> IsItem
		{
			get
			{
				return this._IsItem;
			}
			set
			{
				if ((this._IsItem != value))
				{
					this.OnIsItemChanging(value);
					this.SendPropertyChanging();
					this._IsItem = value;
					this.SendPropertyChanged("IsItem");
					this.OnIsItemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStore", DbType="Bit")]
		public System.Nullable<bool> IsStore
		{
			get
			{
				return this._IsStore;
			}
			set
			{
				if ((this._IsStore != value))
				{
					this.OnIsStoreChanging(value);
					this.SendPropertyChanging();
					this._IsStore = value;
					this.SendPropertyChanged("IsStore");
					this.OnIsStoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ispurchase", DbType="Bit")]
		public System.Nullable<bool> Ispurchase
		{
			get
			{
				return this._Ispurchase;
			}
			set
			{
				if ((this._Ispurchase != value))
				{
					this.OnIspurchaseChanging(value);
					this.SendPropertyChanging();
					this._Ispurchase = value;
					this.SendPropertyChanged("Ispurchase");
					this.OnIspurchaseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSales", DbType="Bit")]
		public System.Nullable<bool> IsSales
		{
			get
			{
				return this._IsSales;
			}
			set
			{
				if ((this._IsSales != value))
				{
					this.OnIsSalesChanging(value);
					this.SendPropertyChanging();
					this._IsSales = value;
					this.SendPropertyChanged("IsSales");
					this.OnIsSalesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsExpensses", DbType="Bit")]
		public System.Nullable<bool> IsExpensses
		{
			get
			{
				return this._IsExpensses;
			}
			set
			{
				if ((this._IsExpensses != value))
				{
					this.OnIsExpenssesChanging(value);
					this.SendPropertyChanging();
					this._IsExpensses = value;
					this.SendPropertyChanged("IsExpensses");
					this.OnIsExpenssesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsGoods", DbType="Bit")]
		public System.Nullable<bool> IsGoods
		{
			get
			{
				return this._IsGoods;
			}
			set
			{
				if ((this._IsGoods != value))
				{
					this.OnIsGoodsChanging(value);
					this.SendPropertyChanging();
					this._IsGoods = value;
					this.SendPropertyChanged("IsGoods");
					this.OnIsGoodsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSalesBetween2Date", DbType="Bit")]
		public System.Nullable<bool> IsSalesBetween2Date
		{
			get
			{
				return this._IsSalesBetween2Date;
			}
			set
			{
				if ((this._IsSalesBetween2Date != value))
				{
					this.OnIsSalesBetween2DateChanging(value);
					this.SendPropertyChanging();
					this._IsSalesBetween2Date = value;
					this.SendPropertyChanged("IsSalesBetween2Date");
					this.OnIsSalesBetween2DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsReportExpensses", DbType="Bit")]
		public System.Nullable<bool> IsReportExpensses
		{
			get
			{
				return this._IsReportExpensses;
			}
			set
			{
				if ((this._IsReportExpensses != value))
				{
					this.OnIsReportExpenssesChanging(value);
					this.SendPropertyChanging();
					this._IsReportExpensses = value;
					this.SendPropertyChanged("IsReportExpensses");
					this.OnIsReportExpenssesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBalanceSheet", DbType="Bit")]
		public System.Nullable<bool> IsBalanceSheet
		{
			get
			{
				return this._IsBalanceSheet;
			}
			set
			{
				if ((this._IsBalanceSheet != value))
				{
					this.OnIsBalanceSheetChanging(value);
					this.SendPropertyChanging();
					this._IsBalanceSheet = value;
					this.SendPropertyChanged("IsBalanceSheet");
					this.OnIsBalanceSheetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsUser", DbType="Bit")]
		public System.Nullable<bool> IsUser
		{
			get
			{
				return this._IsUser;
			}
			set
			{
				if ((this._IsUser != value))
				{
					this.OnIsUserChanging(value);
					this.SendPropertyChanging();
					this._IsUser = value;
					this.SendPropertyChanged("IsUser");
					this.OnIsUserChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
